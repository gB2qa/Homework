1) Что такое проект?	
Проект в тестировании - это конкретная задача или набор задач, направленных на проверку качества ПО
2) Из каких этапов состоит Waterfall model/Каскадная модель?	
     1. Анализ требований: Этот этап включает взаимодействие с заказчиком для понимания того, что необходимо реализовать.
     2. Проектирование: Создание архитектуры системы и проектирование ее компонентов. Здесь разрабатываются как высокоуровневые, так и детализированные спецификации.
     3. Кодирование: На этом этапе разработчики пишут код, основываясь на проектной документации. Реализуются все функциональные компоненты системы.
     4. Тестирование: Проведение тестирования для выявления и исправления ошибок. На этом этапе проверяется соответствие реализованных функций их требованиям.
     5. Внедрение: Установка и настройка системы в рабочую среду́, а также обучение пользователей.
     6. Поддержка: Обеспечение технической поддержки и исправление ошибок в процессе эксплуатации системы, включая внесение изменений на основе отзывов пользователей.
3) Какие преимущества и недостатки Waterfall model/Каскадной модели?	
      Преимущества:
        1. Простота: Линейная структура облегчает понимание процесса разработки. Каждый этап отчетливо обозначен.
        2. Четкие требования: Поскольку требования собираются в начале, это помогает избежать путаницы в дальнейших этапах.
        3. Документированность: Модель предполагает наличие обширной документации на каждом этапе, что облегчает управление проектом.
        4. Легкая оценка прогресса: Каждый этап завершен до перехода к следующему, что упрощает отслеживание статуса проекта.
        5. Подходит для небольших проектов: В некоторых случаях, особенно для малых и средних проектов, водопадная модель может быть достаточно эффективной.

      Недостатки:
        1. Негибкость: Изменения на поздних стадиях разработки могут быть дорогими и сложными, так как они требуют возврата к предыдущим этапам.
        2. Риски неполных требований: Если вначале не удается определить все требования, это может привести к серьезным проблемам в будущем.
        3. Поздняя доставка: Тестирование происходит только после завершения кодирования, что может выявить ошибки и недочеты слишком поздно в процессе.
        4. Сложность в управлении изменениями: Если в процессе разработки появляются новые требования, их внедрение может вызвать значительные затруднения.
        5. Неэффективность для крупных проектов: Для проектов с высоким уровнем сложности и изменения требований водопадная модель может оказаться неэффективной.
4) Из каких этапов состоит V-model/V- модель?	
V-модель показывает интеграцию процессов тестирования в каждую фазу цикла разработки программного обеспечения. Мы видим те же стадии, что и в водопадной модели, только нижняя половина “водопада” развернута вверх. Каждый этап тестирования ПЛАНИРУЕТСЯ на соответствующем этапе разработки
5) Когда использовать V-model/V- модель?	
Если проекту требуются детально проработанные требования и не ожидается значительных изменений на протяжении жизненного цикла, V-модель будет идеальным выбором, обеспечивая стабильность и предсказуемость процесса
6) Из каких этапов состоит Iterative model/Итеративная модель?	
     1. Сбор и анализ требований
Процесс начинается со сбора и анализа требований к продукту. Данные систематизируют и документируют. Выясняют, соответствует ли бюджет заказчика требованиям.

     2. Проектирование
Разработчики получают полный набор требований к ПО и предлагают решения для достижения результата. Создают дизайн и архитектуру продукта, определяют уровень сложности и критичность проекта.

     3. Разработка
Команда пишет код, создает функции ПО для итерации. Сверяет результат с изначальными требованиями. Создает продукт, готовый к установке и запуску.

     4. Тестирование
Процесс тестирования нужен, чтобы выявить проблемы и ошибки. Их оперативно устраняют.

     5. Развертывание
ПО разворачивают в рабочей среде. Собирают отклики у пользователей.
7) Когда использовать Iterative model/Итеративной модели?	
     1.Требования к проекту не определены полностью или изменяются в процессе разработки.
     2. Проект имеет длительный срок выполнения, и требуется предоставлять результаты заказчику на регулярной основе.
     3. Необходима быстрая реакция на обратную связь от заказчика, чтобы можно было изменить проект в соответствии с требованиями.
     4. Проект разбивается на несколько итераций, которые могут выполняться параллельно разными командами.
     5. Необходимо быстро начать разработку, не имея полного понимания всех требований и ограничений проекта.
     6. Разработка сложной системы, где каждая итерация позволяет уточнить требования и получить обратную связь.
     7. Эта модель хорошо подходит для проектов, которые могут быть разделены на небольшие части и технологии разработки, используемые в проекте, хорошо изучены и понятны. Она также хорошо работает в командах, где есть высокий уровень взаимодействия и коммуникации между членами команды и заказчиком.
8) Плюсы и минусы Iterative model/Итеративной модели?	
    Преимущества:
       1. Гибкость: Итеративный подход позволяет легко адаптироваться к изменениям в требованиях и условиях проекта. Если появляются новые требования, то они могут быть внесены в следующую итерацию. Также в любой момент можно внести изменения в процесс разработки, чтобы улучшить его эффективность.
       2. Контроль над рисками: Итеративная модель позволяет контролировать риски на каждом этапе. Это возможно благодаря тому, что каждая итерация заканчивается тестированием и оценкой результатов. Если появляются проблемы, то они могут быть быстро устранены.
       3. Улучшение качества продукта: Благодаря постоянному тестированию и оценке результатов каждой итерации, разработчики могут быстро исправлять ошибки и улучшать качество продукта. Также постоянное обсуждение результатов с заказчиком помогает более точно определить требования и улучшить продукт на следующих этапах.
       4. Более быстрая разработка: Итеративная модель позволяет ускорить процесс разработки, благодаря тому, что каждая итерация фокусируется на определенной функциональности системы. Это позволяет разрабатывать продукт постепенно, что уменьшает риски ошибок и неправильных решений.
       5. Участие заказчика: Итеративная модель разработки включает заказчика в процесс разработки. Заказчик может следить за прогрессом и давать обратную связь после каждой итерации. Это позволяет заказчику контролировать процесс и убедиться, что проект соответствует его требованиям

     Недостатки:
       1. Сложность планирования: Итеративная модель разработки может быть сложной для планирования. Это связано с тем, что каждая итерация является мини-проектом, который требует отдельного планирования и оценки. Если не выполнить правильное планирование, то проект может выйти за рамки бюджета и сроков.
       2. Высокие затраты: Итеративная модель разработки может быть более затратной, чем другие модели разработки. Это связано с тем, что каждая итерация требует времени и ресурсов, чтобы разработать и протестировать функциональность. Если проект требует множества итераций, то общие затраты на проект могут значительно увеличиться.
       3. Необходимость участия заказчика: Итеративная модель разработки требует активного участия заказчика в процессе разработки. Если заказчик не может уделять достаточно времени и внимания проекту, то он может не получить желаемый результат.
       4. Риск неправильного понимания требований: Если требования заказчика не были поняты правильно на начальных этапах, то могут возникнуть проблемы на следующих итерациях. Это может привести к тому, что заказчик будет неудовлетворен результатами и потребуется больше времени и ресурсов на исправление ошибок.
       5. Не подходит для всех проектов: Итеративная модель разработки может не подходить для всех проектов. Если проект имеет жесткие требования по срокам или бюджету, то Итеративная модель может быть неэффективной. Кроме того, для проектов, которые требуют определенной последовательности выполнения задач, может быть лучше использовать другие модели разработки.
9) Agile - это?	
Agile - это методика гибкого подхода к управлению проектами разработки программного обеспечения
10) Agile манифест - это?	
Agile манифест - это ключевой документ, в котором перечислены фундаментальные идеи и положения методологии разработки программного обеспечения.
11) Какие ценности Agile манифест?	
    1. Люди и взаимодействие     важнее      процессов и инструментов
    2. Работающий продукт     важнее      исчерпывающей документации
    3. Сотрудничество с заказчиком     важнее       согласования условий контракта
    4. Готовность к изменениям      важнее         следования первоначальному плану
12) Основные принципы Agile манифест?	
    1. Удовлетворение клиента
    2. Приветствие изменений
    3. Частая поставка
    4. Ежедневное сотрудничество
    5. Мотивированные люди
    6. Разговор вживую
    7. Работающее программное обеспечение
    8. Устойчивое развитие
    9. Техническое совершенство
    10. Простота
    11. Самоорганизация команд
    12. Постоянное улучшение
13) Scrum - это? (опишите подробно)	
Scrum — это методика гибкого управления проектами, которая помогает командам структурировать свою работу и управлять ею с помощью набора ценностей, принципов и практик.
Основная единица Scrum — это небольшая команда людей, Scrum-команда. Scrum-команда состоит из одного Scrum-мастера, одного владельца продукта и разработчиков.
   События Scrum: 
     1. Sprint -.это фиксированные события длиной в один месяц или меньше для создания последовательности. Новый спринт начинается сразу после завершения предыдущего спринта.
Вся работа, необходимая для достижения цели продукта, включая планирование спринта, ежедневные скрамы, обзор спринта и ретроспективу спринта, выполняется в рамках спринтов
     2. Sprint Planning (планирование спринта)
Планирование спринта инициирует спринт, планируя работу, которую необходимо выполнить для спринта. Этот итоговый план создается совместной работой всей команды Scrum.
     3. Daily Scrum (ежедневный Scrum)
Цель ежедневного Scrum-совещания — проверить прогресс в достижении цели спринта и при необходимости адаптировать бэклог спринта, скорректировав предстоящую запланированную работу.
     4. Sprint Review (обзор спринта)
Целью обзора спринта является проверка результатов спринта и определение будущих адаптаций. Scrum-команда представляет результаты своей работы ключевым заинтересованным сторонам, и обсуждается прогресс в достижении цели продукта
     5. Sprint Retrospective (ретроспектива спринта)
Целью ретроспективы спринта является планирование путей повышения качества и эффективности.
     6. Backlog Grooming - причесывание бэклога

   Артефакты Scrum:
     1. Product Backlog (бэклог продукта)
Бэклог продукта — это возникающий, упорядоченный список того, что необходимо для улучшения продукта. Это единственный источник работы, выполняемой Scrum-командой.
     2. Sprint Backlog (спринт бэклог)
Это план, составленный разработчиками для разработчиков.
     3. Increment (приращение)
Инкремент — это конкретная ступенька к Цели продукта
14) Что такое Velocity / Capacity?	
   Velocity(производительность/скорость)- это величина, отражающая количество работы, которое Скрам-команда может выполнить за один Спринт
Цель  –  выяснить, сколько задач команда реально выполняет за спринт с нужным качеством.
   Capacity(дословно мощность, нагрузка; производительность)  - это объем работы, который команда или разработчик может выполнить за определенный период времени с учетом имеющихся ресурсов
15) Преимущества и недостатки Scrum	
    Преимущества:
      1. Гибкость и адаптивность
      2. Более быстрая доставка продукта
      3. Контроль и управление рисками
      4. Прозрачность и видимость
      5. Улучшение качества продукта

    Недостатки: 
      1. Scrum очень требователен к команде проекта
      2. Может быть неподходящим для долгосрочного планирования
      3. Риски недостаточной документации
      4. Scrum — инкрементальный подход (мост по Scrum не построить)
      5. Траты временного ресурса
16) Что такое ретроспектива?	
Ретроспектива - — это специальная встреча, которая проводится по итогам одного или нескольких спринтов. На ней команда подводит итоги проделанной работы и рефлексирует о проведенном времени.
17) Kanban- это? (опишите подробно)	
Канбан – это метод визуализации рабочих процессов.
   Основные принципы:
    1. Визуализация рабочего процесса
    2. Ограничение количества работ в процессе (WIP*)
 *WIP - Лимиты незавершенной работы
    3. Управление потоком
    4. Явные правила
    5. Использование обратной связи для постоянного улучшения
    6. Улучшение сотрудничества"
19) Преимущества и недостатки Kanban?	
    Преимущества:
1. Визуализация работы
2. Гибкость
3. Ориентация на непрерывную постановку задач
4. Улучшенное сотрудничество

    Недостатки:
1. Отсутствие структуры
2. Отсутствие временных рамок
3. Ограниченное количество ретроспектив спринта
4. Отсутствие расстановки приоритетов
20) Что такое SDLS? Из каких этапов состоит? Что происходит на каждом этапе?	
Жизненный цикл разработки программного обеспечения (SDLC) – это процесс, направленный на создание и поддержание работоспособности, качества и надежности ПО.
   Этапы SDLC:
1. Анализ и сбор требований (планирование)
Этап планирования обычно предусматривает выполнение таких заданий, как анализ затрат и выгод, составление расписания, оценка и распределение ресурсов
2. Дизайн и проектирование
На этапе проектирования инженеры-программисты анализируют требования и определяют наилучшие решения для создания программного обеспечения
3. Разработка программного обеспечения
Разработка - регулирует процесс создания продукта
4. Тестирование
Тестирование - регулирует обеспечение качественной работы продукта
5. Развертывание
Этап развертывания предусматривает выполнение нескольких заданий по перемещению последней копии сборки в производственную среду, таких как упаковка, конфигурация среды и установка
6. Обслуживание и поддержка.
После того, как система развернута и клиенты начинают использовать разработанную систему следует 3 вида активностей:
- Исправление ошибок;
- Обновление;
- Улучшение.
21) Что такое STLS? Из каких этапов состоит? Что происходит на каждом этапе?	
STLC, или жизненный цикл тестирования — это процесс тестирования, который включает в себя определенную последовательность шагов, чтобы гарантировать достижение целей в области качества
   Цикл состоит из основных этапов:
1. Анализ требований (Requirement Analysis)
На этом этапе тестировщики анализируют требования к программному обеспечению, чтобы убедиться в их ясности, полноте и возможности проведения тестирования
2. Планирование тестирования (Test Planning)
На этом этапе формируется план тестирования, т.е. мы определяем действия и ресурсы, которые помогут достичь целей тестирования (участники и их роли, инструменты, окружение)
3. Разработка тест-кейсов (Test Case Development)
На этом этапе команда создает тест-кейсы, которые описывают шаги, необходимые для тестирования программного обеспечения
4. Настройка тестового окружения (Test Environment Setup)
На этом этапе тестировщики устанавливают необходимое оборудование, программное обеспечение и инструменты тестирования, чтобы создать среду, в которой можно эффективно проводить тестирование.
5. Выполнение тестирования (Test Execution)
На этом этапе выполняется тестирование в соответствии с тест-планом и разработанными тест-кейсами.
6. Завершение цикла тестирования (Test Cycle Closure)
На этапе завершения тестирования команда тестировщиков получает четкое представление о качестве и надежности программного обеспечения. Все дефекты или проблемы, выявленные в ходе тестирования, должны быть устранены. Кроме того, процесс тестирования документируется и записывается для улучшения тестирования в будущем

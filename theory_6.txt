1) Что такое Ошибка/Дефект/Отказ?	
   Ошибка (ISTQB) — любое действие человека, которое вызвало неверный результат. Ошибки могут быть допущены разработчиками, тестировщиками или пользователями.
   Дефект (баг) — изъян в компоненте или системе, который может привести компонент или систему к невозможности выполнить требуемую функцию (ISTQB). Это несоответствие между ожидаемым результатом и фактическим поведением системы
   Отказ ( ISTQB) – событие, при котором система не выполняет ожидаемую функцию. Это постоянное нарушение работы системы, которое делает её непригодной для использования. Отказы могут быть вызваны серьезными дефектами или ошибками, которые не были обнаружены и исправлены.
2) Перечислите Основные типы багов?	
  Воспроизводимый — баг, который может быть воспроизведен тестировщиком в тестовом окружении.
  Невоспроизводимый — баг, который не может быть воспроизведен тестировщиком в тестовом окружении.
  Фатальный — баг, который вызывает крах или аварийное завершение программы.
  Не фатальный — баг, который не вызывает крах программы, но может приводить к некорректному поведению или неправильным результатам.
  Функциональный  — баг, связанный с неправильной работой функциональности программы.
  Нефункциональный — баг, связанный с аспектами производительности, надежности, безопасности и т.д. программы.
  Интерфейсный — баг, связанный с интерфейсом пользователя.
  Синтаксический — баг, связанный с нарушением правил синтаксиса языка программирования.
  Логический — баг, связанный с неправильной логикой работы программы.
  Спецификационный — баг, связанный с нарушением требований к программе, указанных в спецификации.
  Визуальный — баг, связанный с отображением графических элементов программы.
  Локализационный — баг, связанный с неправильным отображением или переводом программы на другие языки.
  Неоднозначный — баг, который может иметь несколько причин и неоднозначный результат.
  Потенциальный — баг, который еще не проявился, но может возникнуть в будущем при определенных условиях.
  Дублирующий — баг, который уже был зарегистрирован и описан ранее.
3) Перечислите “Хитрые баги”?	
Гейзенбаг
Борбаг
Мандельбаг
Шрединбаг
Лунный баг
Статистический баг
Гинденбаг
Баг Хиггса
4) Приведите пример Blocker bug	
5) Приведите пример Critical bug	
6) Приведите пример Major bug	
7) Приведите пример Minor bug	
8) Приведите пример Trivial bug	
10) Какие основные цели локализации дефекта?	
   1. Повышение эффективности отладки
   2. Выявление и диагностика проблемы
   3. Оптимизация процесса тестирования
   4. Сбор информации о дефектах
   5. Улучшение взаимодействия с командой
   6. Повышение удовлетворенности пользователей
   7. Обеспечение качества
   8. Снижение рисков
11) Где могут находиться дефекты?	
Исходный код
Интерфейс пользователя (UI)
Back-end и серверная часть
Базы данных
Интеграция с внешними системами
Настройки конфигурации
Производительность и нагрузки
Безопасность
Система и окружение
Процессы и требования
Документация
11) Перечислите методы локализации дефекта в клиентской части	
   1. Тестирование на разных устройствах/браузерах: Проверка работоспособности приложения в разных браузерах и на разных устройствах, так как дефекты могут быть специфичны для определенной платформы.
   2. Инспектирование DOM: Визуальный анализ структуры страницы через инспектор в браузере для поиска проблем с версткой, CSS и взаимодействиями элементов.
   3. Логи браузера/консоль разработчика: Проверка ошибок и предупреждений в консоли разработчика в браузере (F12). Это помогает выявить JavaScript ошибки, сетевые запросы, проблемы с загрузкой ресурсов и другие ошибки.
   4. Отладка (debugging) — этап разработки компьютерной программы, на котором обнаруживают, локализуют и устраняют ошибки.
   5. Инструменты сетевого мониторинга: Использование вкладки ""Сеть"" (Network) в консоли разработчика браузера для анализа сетевых запросов, ответа сервера, заголовков и статусов HTTP
   6. Анализ производительности (Performance): Изучение вкладки ""Performance"" для выявления проблем с производительностью клиентской части, таких как долгие загрузки или утечки памяти
   7. Перезапуск с кешем и без кеша: Очистка кеша и повторная загрузка страницы для исключения проблем, связанных с кешированием
   8. Эмуляция/симуляция мобильных устройств: Использование инструментов эмуляции и симуляции для проверки отображения и работы на разных на мобильных устройствах.
   9. Fiddler/Charles Proxy: Для перехвата и анализа сетевых запросов, когда нужно глубже проанализировать обмен данными между клиентом и сервером
12) Перечислите методы локализации дефекта в серверной части	
   1. Анализ HTTP-ответов: Проверка статусов HTTP-ответов, содержимого тела ответа и заголовков с помощью инструментов браузера или сетевых утилит. Это позволяет понять, есть ли ошибки со стороны сервера (например, 500 Internal Server Error)
   2. Postman: Использование инструментов для отправки API-запросов напрямую к серверу для проверки корректности обработки запросов и ответов без участия клиентской части.
   3. Логи сервера: Просмотр серверных логов, чтобы выявить ошибки или исключения, возникающие на сервере при выполнении запросов
   4. Мониторинг серверных ресурсов: Анализ нагрузки на сервер, доступности ресурсов (CPU, память, диск) с помощью мониторинговых систем, чтобы понять, не является ли дефект следствием нехватки ресурсов.
   5. Дебаг на стороне сервера: Совместная работа с разработчиками для использования отладочных инструментов сервера (например, отладка с помощью IDE или других инструментов логирования).
   6. Анализ базы данных: Проверка запросов к базе данных на правильность, выполнение и результаты с помощью инструментов мониторинга БД (например, SQL-запросы, используемые сервером)
   7. Тестирование кэширования: Проверка корректности работы серверного кэширования, например, как сервер обрабатывает повторяющиеся запросы и обновляет данные

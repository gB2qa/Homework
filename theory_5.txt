1) Что такое Тест план?	
   Тест-план — это артефакт тестирования, описывающий действия, которые будут происходить в процессе тестирования—стратегию, цели, подходы, ресурсы, риски и др.
2) Что должен описывать тест план?	
   Тест план должен как минимум отвечать на следующие вопросы:
-что надо тестировать (объект тестирования: система, приложение, оборудование)
-что будете тестировать (список функций и компонент тестируемой системы)
-как будете тестировать (стратегия тестирования - виды тестирования и их применение по отношению к тестируемому объекту)
-когда будете тестировать (последовательность проведения работ: подготовка, тестирование, анализ результатов, в разрезе запланированных фаз разработки проекта)
-критерии начала тестирования (к таким критериям можно отнести готовность тестовой платформы (тестового стенда), законченность разработки требуемого функционала, наличие всей необходимой документации)
-критерии окончания тестирования
(когда результаты тестирования удовлетворяют критериям качества продукта:
   - требования к количеству открытых багов выполнены
   - выдержан определенный период без изменения исходного кода приложения Code Freeze (CF)
   - выдержан определенный период без открытия новых багов Zero Bug Bounce (ZBB)
Далее, Тест-план нужно дополнить следующими пунктами:
   Окружение тестируемой системы (версии ОС, браузеров)
   Необходимые для тестирования ресурсы:
программные ресурсы - инструменты для тестирования (например, Jira, TestRail, Selenium)
аппаратные ресурсы
человеческие ресурсы
временные ресурсы
финансовые ресурсы
тестовые данные
   Риски и их разрешение
3) Какие вы знаете Виды тест планов?	
   Виды тест планов:
Мастер тест план (project test plan or Master Test Plan)
Детальный тест план
План приемочных испытаний (Product Acceptance Plan) — документ, описывающий набор действий, связанных с приемочным тестированием (стратегия, дата проведения, ответственные работники и т.д.)
4) Что такое Чек лист?	
   Чек-лист - это список проверок, которые необходимо провести для тестирования приложения или его части
5) Перечислите возможные атрибуты Чек листа	
   Обязательные части чек-листа:
Шапка:  содержит информацию о названии приложения, его версии, окружении, на котором проводится тестирование (версия ОС, браузера, эмулятора), ответственного за тестирование, дату тестирования. 
Тестируемые модули, субмодули: например, регистрация, аутентификация, авторизация.
Список проверок: они должны отражать основную суть, без лишней детализации.
Уникальный идентификатор проверок для прослеживаемости.
Статус: информация о статусе прохождения проверки
   Дополнительные части чек-листа
Ожидаемый результат:  то, что мы ожидаем увидеть после запуска проверки согласно требованиям
Типы тестирования: к какому типу относится проверка?
Отчеты о дефекте: ссылки на отчеты о дефектах для прослеживаемости.
Заметки/комментарии: если нужно добавить информацию.
6) Перечислите варианты статусов при прохождении Чек листа	
Passed (Пройден) — проверка прошла успешно. Используется, когда тест полностью соответствует ожидаемым результатам.
Failed (Провален) — проверка провалилась. Это значит, что обнаружены несоответствия между фактическим результатом и ожидаемым.
Blocked (Заблокирован) — тест не может быть выполнен из-за каких-то внешних причин. Например, недостаток данных, сбои в системе или зависимость от другой задачи, которая не завершена.
Skipped (Пропущен) — тест был намеренно пропущен. Может быть, проверка нерелевантна для текущей версии, задачи или её выполнение не требуется.
Not Run (Не выполнен) — тест ещё не был выполнен. Этот статус ставится до того, как проверка началась.
N/A (Not Applicable, не применимо) означает, что проверка или тест не относится к текущему контексту, сценарию или продукту. 
7) Что такое Тест кейс?	
   Test case (тест-кейс, тестовый пример/случай) - это артефакт, описывающий совокупность шагов, конкретных условий и параметров, необходимых для проверки реализации тестируемой функции или ее части
8) Перечислите атрибуты Тест кейса?	
ID — уникальное сочетание букв и цифр.
Заголовок — основная идея тест-кейса, краткое описание его сути. Например, заголовок тест-кейса для ручного тестирования страницы входа может выглядеть следующим образом: «Проверить вход пользователя с корректными данными».
Предусловия — список действий, которые необходимо выполнить перед выполнением тест-кейса. При необходимости здесь могут указываться учетные данные.
Шаги — описание действий, необходимых для проверки.
Постусловия — список действий, возвращающих систему в исходное состояние (указывается при необходимости).
Ожидаемый результат — то, что мы ожидаем получить после успешного выполнения тест-кейса.
Фактический результат — то, что мы получаем после выполнения тест-кейса (указывается при необходимости).
Статус — Success (успех), Failed (провал), Blocked (блокировка) (указывается при необходимости)
9) Перечислите виды Тест кейсов?	
   1. Позитивный тест-кейс проверяет исполнение системой позитивного сценария нормального использования ПО
   2. Негативный тест-кейс определяет поведение системы при получении некорректных входных данных. В этом случае система не проигрывает позитивный сценарий, то есть не делает того, что не предусмотрено.
   3. Деструктивный тест-кейс - проверяет систему на прочность. С его помощью тестировщики изучают сценарии работы ПО в экстремальных условиях, например при повышенной нагрузке
10) Что такое Тестовый набор (Test Suite)?	
    Тестовый набор - это набор тестов/тест-кейсов,собранных по функциональности в последовательность для достижения некоторой цели
11) Что такое Баг репорт?	
    Баг-репорт (bug report) — это технический документ, который подробно описывает ошибку в работе программы, приложения или другого ПО.
12) Какое нужно соблюдать правило в баг репорте для хорошего Summary?	
В одном предложении нам нужно вместить смысл всего баг репорта, а именно: коротко и ясно, используя правильную терминологию сказать что,где и при каких условиях не работает. 
Для этого используется принцип ""Что? Где? Когда?"
13) Перечислите атрибуты Баг репорта?	
   Атрибуты Баг репорта, как правило, следующие:
ID -порядковый номер
Environment - окружение, на котором найден баг
Severity (Серьезность) - атрибут, характеризующий влияние дефекта на работоспособность приложения. Проставляется тестировщиком или техническим специалистом, который может оценить степень влияния дефекта на работу системы
Priority (Приоритет) - атрибут, указывающий на очередность выполнения задачи или устранения дефекта. Проставляется руководителем или менеджером проекта
Summary (Тайтл, описание) - раздел, который кратко передает суть бага одним предложением.
Precondition (Предварительное условие) - используется, если предварительно систему нужно приводить к состоянию, пригодному для проведения проверки
Steps (Шаги для воспроизведения) - последовательность действий для воспроизведения бага 
Expected result (Ожидаемый результат) - описание того, как программа или функциональность должны работать
Actual result (Фактический результат) -  описание того, что происходит на самом деле
Attachment (Вложения) - файл с логами, скриншот/видео или любой другой документ, который может помочь прояснить причину ошибки или указать на способ решения проблемы
Author (Автор) - создатель баг-репорта
Assigned To (Назначен на) - имя сотрудника, назначенного на решение проблемы."
14) Опишите Жизненный цикл бага	
   1. Новый (New)
   2. Назначен (Assigned)
   3. Решен (Resolved)
   4. Ожидает повторного тестирования (Pending Retest)
   5. Повторно тестируется (Retest)
   6. Переоткрыт (Reopen)
   7.  Проверен (Verified)
   8. Закрыт (Closed)
15) Что такое Priority?	
    Приоритет (priority) - характеристика, которая показывает степень необходимости скорейшего устранение дефекта.
16) Перечислите классификации Priority	
- Наивысший (Critical) (ASAP, as soon as possible) 
Ошибка должна быть исправлена настолько быстро, насколько это возможно и может варьироваться от «в ближайшем билде» до единиц минут.
- Высокий (High)
Ошибка должна быть исправлена как можно быстрее, т.к. ее наличие является критической для проекта.
- Средний (Medium)
Ошибка должна быть исправлена, ее наличие не является критичной, но требует обязательного решения.
- Низкий (Low)
Ошибка должна быть исправлена, ее наличие не является критичной, и не требует срочного решения.
17) Что такое Severity?	
   Серьезность (Severity) - это атрибут, характеризующий влияние дефекта на работоспособность приложения
18) Перечислите классификации Severity	
   1. Критическая (critical) - существование дефекта приводит к масштабным последствиям катастрофического характера.
   2. Высокая (major) - существование дефекта приносит ощутимые неудобства многим пользователям в рамках их типичной деятельности.
   3. Средняя (medium) - существование дефекта слабо влияет на типичные сценарии работы пользователей, и/или существует обходной путь достижения цели.
   4. Низкая (minor) - существование дефекта редко обнаруживается незначительным процентом пользователей и (почти) не влияет на их работу.
19) Приведите пример Низкого Priority и Высокого Severity	
Допустим, у нас есть приложение для банкинга. Оно правильно рассчитывает ежедневный, ежемесячный и ежеквартальный отчет, но при расчете годового возникают проблемы. Этот баг имеет высокую степень серьезности. Но если сейчас формирование годовой отчетности не актуально, такой дефект имеет низкий приоритет: его можно исправить в следующем релизе.
20) Приведите пример Низкого Severity и Высокого Priority	
Логотип компании на главной странице содержит орфографическую ошибку. На функционал это вообще не влияет, но портит пользовательский опыт. Этот баг нужно исправить с высоким приоритетом, несмотря не то, что на продукт он влияет минимально.
21) Что такое Матрица соответствия требований (Requirements Traceability Matrix)?	
   Матрица трассируемости — двумерная таблица, содержащая соответствие функциональных требований продукта (functional requirements) и подготовленных тестовых сценариев (test cases
22) Что такое Тест-отчет?	
   Отчет о тестировании (Test report) – вид тестовой документации, который обобщает опыт проведенных QA-мероприятий
23) По времени Тест отчет на сколько типов возможно разделить?	
  Недельный, месячный, промежуточный.
  Версионный. Похож на финальный отчет. Здесь указывают, какие задачи выполнялись командой, работающей над проектом. Делается в конце работы над каждой версией приложения;
  Финальный, или заключительный. Прописывается эволюция продукта, описывается общий взгляд на сделанную работу. Также, надо дать исчерпывающую информацию о статусе продукта в данный момент (количество оставшихся неисправленных ошибок, полностью ли протестирован продукт или требуется дополнительный цикл тестирования, оценка возможности выпуска продукта во «внешний мир» и т.д).
24) Что должен показывать Промежуточный отчет?	
Это практически тот же финальный отчет, но с измененными приоритетами фокуса и уменьшенной глубиной временной выборки. В нем обязательно должны содержаться две главных метрики:
  — Оценка степени готовности продукта.
  — Оценка проведённых работ по тестированию за время между отчетностями (прогресс).
Этот отчет должен показать какова динамика вашей работы
25) Что должен показывать Итоговый отчет?	
В финальном отчете важно показать общий взгляд на проделанную работу (в контексте установленных метрик) и эволюцию продукта.
Так же, надо дать исчерпывающую информацию о статусе продукта в данный момент (количество оставшихся неисправленных ошибок, полностью ли протестирован продукт или требуется дополнительный цикл тестирования, оценка возможности выпуска продукта во «внешний мир» и т.д).

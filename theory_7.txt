1) Требования - это что?	
   Требования представляют собой детальные описания того, что система должна выполнять, как она должна функционировать и какими характеристиками должна обладать
2) Для чего нужен Анализ требований в разработке программного обеспечения?	
   Цель анализа требований - определить потребности пользователей и перевести их в конкретные, измеримые и достижимые требования, которые команда разработчиков программного обеспечения может использовать для проектирования и разработки системы
3) Перечислите Виды требований	
   Функциональные требования – они определяют именно функции и возможности, которыми должен обладать продукт. 
   Нефункциональные требования – это характеристики конкретной системы: безопасность, совместимость, производительность и т.д.
Также можно разделить требования на 3 категории:
   Явные – базовый тип требований. Это то, что клиент передает специалистам в виде документации с описанием каркаса ПО, критериев приема, спецификации дизайна. Иногда эти требования могут быть переданы в частной переписке, маркетинговых инструментах и т.д.;
   Неявные – это то, что клиент хочет видеть, но не упоминает, полагаясь на профессионализм разработчиков. Сюда могут входить производительность, доступность, безопасность и другие параметры. Неявные требования должны быть в тестировании обязательно, чтобы обеспечить нефункциональный компонент продукта;
   Скрытые – то, что клиент не ожидает увидеть/не знает о таких возможностях, но это может быть использовано для увеличения конкурентоспособности продукта, модернизации. Например, это различные анимации, мелкие функции, заполняющие пустые пространства"
4) Перечислите Функциональные уровни требований	
   1. Бизнес-требования.  Выражают цель, ради которой разрабатывается продукт (зачем вообще он нужен, какая от него ожидается польза, как заказчик с его помощью будет получать прибыль).  Пример: промо-сайт, привлекающий внимание определенной аудитории к определенной продукции компании.
   2. Пользовательские требования описывают задачи, которые пользователь может выполнять с помощью разрабатываемой системы (реакцию системы на действия пользователя, сценарии работы пользователя). Пользовательские требования оформляются в виде вариантов использования (use cases), пользовательских историй (user stories), пользовательских сценариев (user scenarios). Пример: при первом сохранении новой статьи система должна выдавать запрос на сохранение в виде черновика или публикацию.
   3. Функциональные требования – определяют функциональность (поведение) программной системы, которая должна быть создана разработчиками для предоставления возможности выполнения пользователями своих обязанностей в рамках бизнес-требований и в контексте пользовательских требований. Пример: система должна автоматически выполнять резервное копирование данных ежедневно в указанный момент времени.
   4. В группу функциональных требований относят и Системные требования. Эти характеристики могут описывать требования как к аппаратному обеспечению (тип и частота процессора, объем оперативной памяти, объём жёсткого диска), так и к программному окружению (операционная система, наличие установленных системных компонентов и сервисов и т. п.). Обычно такие требования составляются производителем или автором ПО. Например, для игры это могут быть требования такого типа: видеокарта — объем памяти от 64 Мб, совместимость с DirectX 9.0b и новейшие драйвера. Для сайта: ОС — Windows не ниже XP, браузеры IE не ниже 7.0 и так далее.
5) Перечислите Нефункциональные уровни требований	
   1. Бизнес-правила;
   2. Атрибуты качества;
   3. Внешние интерфейсы;
   4. Ограничения.
6) Перечислите техники сбора требований	
- Интервью;
- Опросы;
- Семинары;
- Прототипирование;
- Анализ сценариев использования;
- Нотация моделирования бизнес-процессов (BPMN); 
- Унифицированный язык моделирования (UML);
- Техника блок-схем;
- Диаграмма потока данных;
- Анализ пробелов.
7) Что такое Спецификация требований программного обеспечения (SRS)?	
  Software Requirements Specification – документ, содержащий полное описание поведения разрабатываемой системы, включающее функциональные и нефункциональные требования
8) Что такое Use Case?	
   Use case (в переводе с англ. «вариант использования») — это документ, который описывает, какие действия выполняет пользователь и как система должна на них реагировать
9) Приведите пример Use Case	
После нажатия кнопки "Зарегистрироваться" данные о пользователе кладуться в базу данных
10) Перечислите Характеристики качества требований	
   Полнота. Все ли описано? Ничего ли не забыли? Что, если у нас все еще есть неописанный функционал или пользовательский сценарий? Документация должна предоставлять максимально четкую информацию о том, как должен работать каждый отдельный модуль и весь продукт в целом. После прочтения документации не должно оставаться вопросов, но на практике выявляется большое количество недостатков.
   Корректность и согласованность. Все утверждения должны быть правильными, правдивыми и иметь смысл.
   Последовательность. Требования не должны противоречить сами себе. Обычно это происходит, когда требований много. Аналитик просто забывает, что уже писал о параметре, и снова придумывает его поведение. Иногда он придумывает что-то немного другое.
   Ясность. Требования должны быть прозрачными и понятными для всех, с возможностью только одной интерпретации.
   Тестируемость. Можно ли протестировать эту функциональность? Подумайте об этом заранее. А бывает, что разработчик уже все сделал, и только тогда тестировщик понимает, что задачу никак нельзя проверить. Или можно проверить вручную, но нельзя написать автотесты, фреймворк под новую функциональность не заточен. Это может быть проблемой, если в компании все проверки автоматизируются.
   Прослеживаемость. Требование полностью или частично соответствует потребностям бизнеса, заявленным заинтересованными сторонами, и это задокументировано.
   Атомарность. Требование не может быть разделено на несколько более детальных требований без потери полноты.
   Выполнимость. Требование может быть реализовано в рамках данного проекта.
   Модифицируемость. Модифицируемость требований подразумевает легкость их изменения.
11) Приведите пример к каждой Характеристике качества требований	
   Полнота
Пример: "Система должна позволять пользователям регистрироваться, используя адрес электронной почты и пароль. Пароль должен быть длиной не менее 8 символов и содержать как минимум одну цифру и один специальный символ." Адрес электронной почты состоит из двух частей, разделенных символом «@». Левая часть состоит из цифр (0-9), букв (A-Z). Правая часть адреса указывает доменное имя того сервера, на котором расположен почтовый ящик. Это требование содержит все необходимые детали для реализации функциональности регистрации.
   Непротиворечивость
Пример: "Система должна отображать товары в порядке убывания цены." Система должна отображать товары в порядке возрастания рейтинга. Эти требования противоречат друг другу и не могут быть реализованы одновременно.
   Недвусмысленность
Пример: "Система должна обрабатывать запросы в течение 2 секунд." Это требование не содержит жаргона и может быть интерпретировано только одним способом.
   Корректность
Пример: "При вводе неверного пароля система должна отображать сообщение 'Неверный пароль'." Это требование точно описывает ожидаемое поведение системы при некорректном вводе пароля.
   Выполнимость
Пример: "Система должна поддерживать до 1000 одновременных пользователей." Это требование реально осуществимо с учетом доступных ресурсов и технологий.
   Проверяемость
Пример: "Время отклика системы не должно превышать 500 мс." Это требование можно проверить с помощью тестирования производительности.
   Атомарность
Пример: "Пользователь может зарегистрироваться, введя имя, адрес электронной почты и пароль." Это требование описывает одну функциональность и не делится на более мелкие части.
   Прослеживаемость
Пример: "Требование 1.2.3: Система должна отображать товары в порядке убывания цены." Требование имеет уникальный идентификатор, что позволяет проследить его связь с другими требованиями.
   Модифицируемость
Пример: "Требование 2.1: Система должна поддерживать интеграцию с платежными системами PayPal и Stripe." Это требование сформулировано таким образом, что позволяет легко добавить поддержку других платежных систем в будущем.
12) Что такое Пользовательские истории(User story)?	
    User Story  --  это короткая запись сути требования в формате "As a … I want to … so that I can
13) Приведите пример Пользовательских историй(User story)	
  Как пользователь WhatsApp, я хочу, чтобы значок камеры в поле ввода чата позволял захватывать и отправлять изображения, чтобы я мог щелкнуть и поделиться своими фотографиями одновременно со всеми своими друзьями
14) Какие преимущества и недостатки Пользовательских историй(User story)	
    Плюсы:
   Сосредоточенность на пользователе:
Пример: История "Как пользователь, я хочу иметь возможность фильтровать товары по цене, чтобы быстро находить подходящие мне варианты". Это помогает команде сосредоточиться на том, что важно для пользователя.
   Простота и ясность:
Пример: История "Как администратор, я хочу видеть список всех пользователей, чтобы управлять их доступом". Пользовательские истории элементарны и легко понимаемы, что облегчает общение между разработчиками и заинтересованными сторонами.
   Гибкость и адаптивность:
Пример: История "Как турист, я хочу, чтобы приложение показывало мне текущую погоду в моем месте назначения, чтобы я мог подготовиться к поездке". Легко адаптировать или изменить в ответ на новые требования или отзывы пользователей.
   Упрощение приоритизации:
Пример: Если у нас есть истории о поиске и фильтрации, команда может решить, что фильтрация по цене важнее, чем сортировка по популярности, исходя из потребностей пользователей.
   Поддержка разработки поэтапно:
Пример: История "Как пользователь, я хочу иметь возможность восстанавливать забытый пароль". Такой подход позволяет разбить большие задачи на более мелкие, подходящие для Agile-разработки.
    Минусы:
   Неполнота требований:
Пример: На раннем этапе может быть упущена важная деталь, например, "Как пользователь, я хочу видеть результаты поиска только на английском языке". Это может вызвать недоразумения в разработке.
   Сложности с формулировкой:
Пример: Если команда не умеет хорошо формулировать пользовательские истории, это может привести к неопределенности. Например, "Как пользователь, я хочу отзывы" может быть слишком размытым без указания контекста (в каком разделе, в каком формате и т. д.).
   Игнорирование технических аспектов:
Пример: Пользовательская история "Как покупатель, я хочу легко добавлять товары в корзину" может игнорировать необходимость интеграции с платежной системой и вопросами безопасности.
   Отсутствие метрик для оценки:
Пример: История "Как администратор, я хочу, чтобы система работала быстрее" не дает количественных критериев, по которым можно было бы оценить, что значит "быстрее".
   Трудности с масштабированием:
Пример: Если проект становится слишком большим и сложным, управление историей может стать трудоемким, и это может привести к трудностям в отслеживании прогресса.
15) Что такое Критерии приемки(Acceptance criteria)?	
   Критерии приемки - это набор условий, которые должны быть выполнены, чтобы задача или user story считались завершенными с точки зрения конечного пользователя
16) Перечислите виды и форматы критерий приемки	
   Типы и структуры критериев приемки :
- ориентированные на сценарий - тип критериев приемки, который описывается в форме сценария и иллюстрирует каждый критерий. Он рассматривается через последовательность Given/When/Then (GWT) – Дано/Когда/Тогда;
- ориентированные на правила - форма, ориентированная на правила, предполагает наличие набора правил, описывающих поведение системы. На основе этих правил можно составить конкретные сценарии.
- пользовательские форматы - при использовании собственных критериев приемки, при условии, что они служат своей цели, четко написаны на понятном языке и не могут быть неправильно истолкованы
17) Приведите пример критерий приемки- список правил	
Как пользователь Я хочу искать товар в пределах установленного диапазона стоимости Чтобы найти подходящие мне товары в моей ценовой категории
  Acceptance Criteria в виде свода правил:
    1. Пользователь может установить свой диапазон цены поиска при помощи бегунка, где изначальный диапазон цен соответствует минимальной и максимальной ценам товаров в выбранной категории или группы категорий.
    2. Пользователь может установить диапазон цены с клавиатуры.
    3. Для активации поиска пользователь нажимает кнопку «Найти».
    4. Если пользователь вводит некорректный диапазон цен, система должна выдавать сообщение об ошибке и не показывать пустой список товаров. В приложении — примеры экранных форм и нотификаций об ошибках.
    5. Результаты поиска должны быть точными и соответствовать установленному диапазону цен, по умолчанию отображаются в порядке возрастания цены.
    6. Результаты поиска разбиваются по 10 штук на странице, обеспечивается переход на предыдущие или следующие страницы при помощи ссылок.
    7. Если результаты поиска были закэшированы, то они должны быть конкретными и актуальными, с учëтом изменений в ценах на товары.
    8. Функция поддерживает автодополнение, которое учитывает категорию товара, чтобы пользователи могли быстро выбрать подходящий диапазон цен.
    9. Для каждой категории товаров предусмотреть предустановленные фильтры для цен: «дешёвые товары», «дорогие товары» и прочее. Варианты — в зависимости от категории — в приложении.
Результаты поиска исключают товары, которых нет в наличии и включают товары, подвоз которых ожидается.
  Добавляем в список следующие ограничения:
    10. Время поиска товаров должно быть не более 3 секунд.
    11. Функция поиска должна быть защищена от SQL-инъекций и атак на XSS.
    12. Проверка входных данных должна быть осуществлена, чтобы предотвратить возможность межсайтовой подделки запросов (CSRF).
18) Приведите пример критерий приемки- поведенческий сценарий	
User story: КАК пользователь, Я хочу иметь возможность восстановить пароль от своей учетной записи, ЧТОБЫ в случае, если я забыл пароль, я мог получить доступ к своей учетной записи
  Сценарий: Забыт пароль 
  Дано: Пользователь переходит на страницу входа  
  Когда: Пользователь выбирает опцию <забыл пароль>  
  И: Вводит действительный адрес электронной почты для получения ссылки на восстановление пароля  
  Тогда: Система отправляет ссылку на указанный адрес электронной почты  
  Дано: Пользователь получает ссылку через электронную почту  
  Когда: Пользователь переходит по полученной ссылке в электронной почте  
  Тогда: Система позволяет пользователю установить новый пароль"
19) Перечислите критерии INVEST для User story	"
  Критерии INVEST для пользовательской истории (User Story):
I — Independent (Независимая): История должна быть автономной и не зависеть от других историй. Это позволяет планировать и выполнять её отдельно, минимизируя блокировки.
N — Negotiable (Обсуждаемая): История — это не контракт, а приглашение к обсуждению. Её детали могут уточняться в ходе взаимодействия с командой и заказчиком.
V — Valuable (Ценная): История должна приносить ценность конечному пользователю или бизнесу. Это помогает сфокусироваться на задачах, которые действительно важны.
E — Estimable (Оцениваемая): История должна быть понятной и достаточной для оценки её сложности и ресурсов на выполнение.
S — Small (Компактная): История должна быть достаточно маленькой, чтобы её можно было реализовать за один спринт (обычно не более недели).
T — Testable (Тестируемая): История должна быть формулируема таким образом, чтобы можно было проверить её выполнение с точки зрения требований.
20) Что такое приемка приложения?	
    "Приемка” – это обязанность заказчика проверить и осмотреть продукт, который поставщик предоставил по заказу
21) Что такое аудит приложения?	
    Аудит качества приложения представляет из себя оценочную проверку состояния как продукта целиком, так и отдельных атрибутов качества, на соответствие объективным характеристикам и требованиям, которые сформулированы в технической документации либо предполагаются из ожиданий конечных пользователей.
22) Этапы проведения аудита.	
     Аудит проводится в 3 этапа:
Тестирование методом Black Box
Тестирование методом Grey Box
Тестирование методом Grey Box с использованием результатов прошлого этапа
23) Чем приемка приложения отличается от аудита?	
   1. Цель
Приемка приложения (Acceptance Testing):
Основная цель — проверить и подтвердить, что разработанное приложение соответствует бизнес-требованиям, техническим спецификациям и готово к использованию конечными пользователями. Приемка проводится для того, чтобы убедиться, что продукт может быть принят заказчиком или выпущен на рынок.
Аудит:
Цель аудита — провести независимую проверку процессов, документации, стандартов, процедур разработки и соответствия различным требованиям (например, внутренним регламентам, стандартам безопасности или отраслевым нормам). Аудит ориентирован на оценку соответствия проекта установленным критериям качества или процессам, а не только на проверку функциональности.
   2. Участники процесса
Приемка:
Обычно участвуют заказчики (клиенты), конечные пользователи и команда тестировщиков. В некоторых случаях разработчики могут участвовать для быстрого исправления выявленных дефектов.
Аудит:
Проводится независимой стороной (внутренние или внешние аудиторы), которая не участвовала непосредственно в разработке или тестировании продукта. Это могут быть специалисты по качеству, комплаенсу или внешние консультанты.
   3. Область проверки
Приемка:
Фокусируется на функциональности и удобстве использования приложения. Проверяются конкретные сценарии использования, соответствие бизнес-требованиям и ожиданиям пользователя. Основное внимание уделяется тому, чтобы приложение работало так, как предполагается, и решало задачи пользователей.
Аудит:
Охватывает более широкие аспекты: процесс разработки, соблюдение стандартов безопасности, документация, управление проектом и тестированием, соответствие нормативным требованиям и регламентам. Аудит часто включает проверку качества процессов, а не только конечного продукта.
   4. Методы и подходы
Приемка:
Осуществляется в основном через выполнение заранее подготовленных тестовых сценариев (acceptance tests), пользовательских сценариев и функциональных проверок. Основное внимание уделяется реальной работе приложения.
Аудит:
Включает анализ документации, проверку процессов разработки, управление изменениями, контроль качества, а также соответствие стандартам (например, ISO, CMMI). Методы могут включать интервью, изучение документации и отчетов, проверки исходного кода, анализ безопасности и др.
   5. Результаты
Приемка:
Результатом является решение о том, что продукт готов к выпуску или внедрению. Если приемка успешна, продукт передается заказчику или пользователям для дальнейшего использования.
Аудит:
Результатом является отчет с оценкой текущего состояния процесса разработки, рекомендациями по улучшению, выявленными несоответствиями и потенциальными рисками. Аудит может не привести к немедленному одобрению или отклонению продукта.
   6. Риск и ответственность
Приемка:
Основной риск связан с возможностью того, что приложение не будет соответствовать требованиям, и его придется дорабатывать. За приемку обычно ответственны клиенты и конечные пользователи, которые либо принимают продукт, либо отклоняют его.
Аудит:
Риски включают несоответствие процесса разработки стандартам или обнаружение серьезных нарушений. Ответственность за проведение аудита лежит на аудиторской группе, а за устранение выявленных проблем — на команде разработки и менеджерах проекта.
24) Назовите типы метрик тестирования. Каковы цели ввода метрик? Приведите примеры метрик.	
  1. Passed/Failed Test Cases. Используется для оценки отношения удачно пройденных тестов к завершившимся с ошибками. Метрика помогает оценить успешность прохождения тестов.
  2. Not Run Test Cases. Демонстрирует количество тестов, которые нужно выполнить для данного проекта. Метрика помогает определить причины невыполнения тестов и способы их устранения.
  3. Open/Closed Bugs. Формируется из отношения открытых багов к закрытым. Метрика оценивает скорость устранения багов, а также позволяет выявить причины, по которым ошибки остались незакрытыми.
  4. Reopened/Closed Bugs. Рассчитывает соотношение переоткрытых багов к закрытым. Метрика демонстрирует эффективность закрытия бага разработчиками и поможет выявить причины, по которым исправление ошибок находится на низком уровне.
  5. Bugs by Severity/Priority. Общее количество багов по серьёзности/приоритету. Метрика показывает качество предоставляемого кода на тестирование.
В процессе тестирования метрики используются:
  - для отслеживания прогресса команды по срокам проекта, дедлайнам и другим временным отрезкам;
  - качественной оценки текущего состояния системы;
  - контроля качества процесса тестирования;
  - постановки целей и эффективного планирования исходя из понимания существующих проблем.
